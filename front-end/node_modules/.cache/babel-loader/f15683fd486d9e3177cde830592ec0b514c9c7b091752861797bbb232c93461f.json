{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\nimport countriesGeoJSON from \"./data/countries.geojson\"; // Import the GeoJSON file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n  useEffect(() => {\n    // Fetch country visit data from the API\n    axios.get(\"http://localhost:3001/countries\").then(response => {\n      setCountries(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching countries\", error);\n    });\n\n    // Set up the Three.js scene\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere for the globe\n    const geometry = new THREE.SphereGeometry(5, 32, 32);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      wireframe: true\n    });\n    globe = new THREE.Mesh(geometry, material);\n    scene.add(globe);\n\n    // Load GeoJSON data and render countries\n    const loader = new THREE.FileLoader();\n    loader.load(countriesGeoJSON, function (data) {\n      const geoData = JSON.parse(data);\n      geoData.features.forEach(feature => {\n        const countryName = feature.properties.ADMIN; // 'ADMIN' is the property name for country names in Natural Earth GeoJSON\n\n        // Find if the country has been visited\n        const countryData = countries.find(c => c.name === countryName);\n        const visited = countryData ? countryData.visited : false;\n\n        // Create country shape from GeoJSON\n        const shape = createCountryShape(feature);\n\n        // Assign color based on visit status (green for visited, red for not visited)\n        const countryMaterial = new THREE.MeshBasicMaterial({\n          color: visited ? 0x00ff00 : 0xff0000,\n          opacity: 0.7,\n          transparent: true\n        });\n        const countryMesh = new THREE.Mesh(shape, countryMaterial);\n        globe.add(countryMesh);\n      });\n    });\n    camera.position.z = 10;\n\n    // Detect clicks on the globe\n    const handleMouseClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = intersects[0].object; // Get the clicked country\n        setSelectedCountry(clickedCountry.userData); // Assuming country data is in userData\n      }\n    };\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Animate the globe\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n\n  // Function to create country shape from GeoJSON data\n  const createCountryShape = feature => {\n    const shape = new THREE.Shape();\n    feature.geometry.coordinates[0].forEach((coordinate, index) => {\n      const [x, y] = coordinate;\n      if (index === 0) {\n        shape.moveTo(x, y);\n      } else {\n        shape.lineTo(x, y);\n      }\n    });\n    return new THREE.ShapeGeometry(shape);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"ICLs415NKmqoStji4l/BqS40j/0=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","axios","CountryModal","countriesGeoJSON","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","get","then","response","data","catch","error","console","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","current","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","loader","FileLoader","load","geoData","JSON","parse","features","forEach","feature","countryName","properties","ADMIN","countryData","find","c","name","visited","shape","createCountryShape","countryMaterial","opacity","transparent","countryMesh","position","z","handleMouseClick","event","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","children","length","clickedCountry","object","userData","addEventListener","animate","requestAnimationFrame","render","removeEventListener","Shape","coordinates","coordinate","index","moveTo","lineTo","ShapeGeometry","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\nimport countriesGeoJSON from \"./data/countries.geojson\"; // Import the GeoJSON file\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n\n  useEffect(() => {\n    // Fetch country visit data from the API\n    axios\n      .get(\"http://localhost:3001/countries\")\n      .then((response) => {\n        setCountries(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching countries\", error);\n      });\n\n    // Set up the Three.js scene\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere for the globe\n    const geometry = new THREE.SphereGeometry(5, 32, 32);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      wireframe: true,\n    });\n    globe = new THREE.Mesh(geometry, material);\n    scene.add(globe);\n\n    // Load GeoJSON data and render countries\n    const loader = new THREE.FileLoader();\n    loader.load(countriesGeoJSON, function (data) {\n      const geoData = JSON.parse(data);\n\n      geoData.features.forEach((feature) => {\n        const countryName = feature.properties.ADMIN; // 'ADMIN' is the property name for country names in Natural Earth GeoJSON\n\n        // Find if the country has been visited\n        const countryData = countries.find((c) => c.name === countryName);\n        const visited = countryData ? countryData.visited : false;\n\n        // Create country shape from GeoJSON\n        const shape = createCountryShape(feature);\n\n        // Assign color based on visit status (green for visited, red for not visited)\n        const countryMaterial = new THREE.MeshBasicMaterial({\n          color: visited ? 0x00ff00 : 0xff0000,\n          opacity: 0.7,\n          transparent: true,\n        });\n\n        const countryMesh = new THREE.Mesh(shape, countryMaterial);\n        globe.add(countryMesh);\n      });\n    });\n\n    camera.position.z = 10;\n\n    // Detect clicks on the globe\n    const handleMouseClick = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = intersects[0].object; // Get the clicked country\n        setSelectedCountry(clickedCountry.userData); // Assuming country data is in userData\n      }\n    };\n\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Animate the globe\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n\n  // Function to create country shape from GeoJSON data\n  const createCountryShape = (feature) => {\n    const shape = new THREE.Shape();\n\n    feature.geometry.coordinates[0].forEach((coordinate, index) => {\n      const [x, y] = coordinate;\n      if (index === 0) {\n        shape.moveTo(x, y);\n      } else {\n        shape.lineTo(x, y);\n      }\n    });\n\n    return new THREE.ShapeGeometry(shape);\n  };\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}