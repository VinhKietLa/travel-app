{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n  useEffect(() => {\n    // Fetch country data from the API\n    axios.get(\"http://localhost:3001/countries\").then(response => {\n      setCountries(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching countries\", error);\n    });\n\n    // Only create renderer and scene once\n    if (!renderer && !scene && !camera) {\n      // Set up the Three.js scene\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n      camera.position.z = 10;\n\n      // Animate the globe\n      const animate = () => {\n        requestAnimationFrame(animate);\n        globe.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        // Simulate fetching data based on the clicked country\n        const clickedCountry = countries.find(c => c.name === \"Japan\"); // Example logic\n        setSelectedCountry(clickedCountry);\n      }\n    };\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"ICLs415NKmqoStji4l/BqS40j/0=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","axios","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","get","then","response","data","catch","error","console","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","current","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","animate","requestAnimationFrame","rotation","y","render","handleMouseClick","event","x","clientX","clientY","setFromCamera","intersects","intersectObjects","children","length","clickedCountry","find","c","name","addEventListener","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","countryData","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n\n  useEffect(() => {\n    // Fetch country data from the API\n    axios\n      .get(\"http://localhost:3001/countries\")\n      .then((response) => {\n        setCountries(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching countries\", error);\n      });\n\n    // Only create renderer and scene once\n    if (!renderer && !scene && !camera) {\n      // Set up the Three.js scene\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true,\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n\n      camera.position.z = 10;\n\n      // Animate the globe\n      const animate = () => {\n        requestAnimationFrame(animate);\n        globe.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        // Simulate fetching data based on the clicked country\n        const clickedCountry = countries.find((c) => c.name === \"Japan\"); // Example logic\n        setSelectedCountry(clickedCountry);\n      }\n    };\n\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}