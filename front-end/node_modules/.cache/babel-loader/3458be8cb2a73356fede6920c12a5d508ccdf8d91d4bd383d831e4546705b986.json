{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n  useEffect(() => {\n    // Sample country data for testing\n    const sampleCountries = [{\n      name: \"Japan\",\n      visited: true,\n      cities: [{\n        name: \"Tokyo\"\n      }, {\n        name: \"Osaka\"\n      }],\n      recommendations: \"Visit Shibuya and Mt. Fuji\",\n      highlights: \"Beautiful landscapes and culture\",\n      dislikes: \"Crowded in some areas\"\n    }, {\n      name: \"Germany\",\n      visited: false,\n      cities: [],\n      recommendations: \"\",\n      highlights: \"Rich history and architecture\",\n      dislikes: \"\"\n    }, {\n      name: \"Brazil\",\n      visited: true,\n      cities: [{\n        name: \"Rio de Janeiro\"\n      }, {\n        name: \"São Paulo\"\n      }],\n      recommendations: \"Visit Christ the Redeemer and Copacabana beach\",\n      highlights: \"Vibrant culture and beautiful beaches\",\n      dislikes: \"High levels of traffic\"\n    }];\n    setCountries(sampleCountries); // Use sample data instead of fetching\n\n    // Set up the Three.js scene (ensure it's only set up once)\n    if (!renderer && !scene && !camera) {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n      camera.position.z = 10;\n\n      // Animate the globe\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = countries[0]; // For now, simulate clicking the first country (Japan)\n        setSelectedCountry(clickedCountry); // Set this as the selected country\n      }\n    };\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"ICLs415NKmqoStji4l/BqS40j/0=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","sampleCountries","name","visited","cities","recommendations","highlights","dislikes","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","current","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","animate","requestAnimationFrame","render","handleMouseClick","event","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","children","length","clickedCountry","addEventListener","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","countryData","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n\n  useEffect(() => {\n    // Sample country data for testing\n    const sampleCountries = [\n      {\n        name: \"Japan\",\n        visited: true,\n        cities: [{ name: \"Tokyo\" }, { name: \"Osaka\" }],\n        recommendations: \"Visit Shibuya and Mt. Fuji\",\n        highlights: \"Beautiful landscapes and culture\",\n        dislikes: \"Crowded in some areas\",\n      },\n      {\n        name: \"Germany\",\n        visited: false,\n        cities: [],\n        recommendations: \"\",\n        highlights: \"Rich history and architecture\",\n        dislikes: \"\",\n      },\n      {\n        name: \"Brazil\",\n        visited: true,\n        cities: [{ name: \"Rio de Janeiro\" }, { name: \"São Paulo\" }],\n        recommendations: \"Visit Christ the Redeemer and Copacabana beach\",\n        highlights: \"Vibrant culture and beautiful beaches\",\n        dislikes: \"High levels of traffic\",\n      },\n    ];\n\n    setCountries(sampleCountries); // Use sample data instead of fetching\n\n    // Set up the Three.js scene (ensure it's only set up once)\n    if (!renderer && !scene && !camera) {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true,\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n\n      camera.position.z = 10;\n\n      // Animate the globe\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = countries[0]; // For now, simulate clicking the first country (Japan)\n        setSelectedCountry(clickedCountry); // Set this as the selected country\n      }\n    };\n\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}