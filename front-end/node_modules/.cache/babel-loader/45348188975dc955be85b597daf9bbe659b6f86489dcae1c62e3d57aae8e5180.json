{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n  useEffect(() => {\n    // Fetch country visit data from the API\n    axios.get(\"http://localhost:3001/countries\").then(response => {\n      setCountries(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching countries\", error);\n    });\n\n    // Set up the Three.js scene (ensure it's only set up once)\n    if (!renderer && !scene && !camera) {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n      camera.position.z = 10;\n\n      // Fetch the GeoJSON data using fetch\n      fetch(\"/data/countries.geojson\").then(response => response.json()).then(geoData => {\n        geoData.features.forEach(feature => {\n          const countryName = feature.properties.ADMIN; // 'ADMIN' is the property name for country names\n\n          // Find if the country has been visited\n          const countryData = countries.find(c => c.name === countryName);\n          const visited = countryData ? countryData.visited : false;\n\n          // Create country shape from GeoJSON\n          const shape = createCountryShape(feature);\n\n          // Assign color based on visit status (green for visited, red for not visited)\n          const countryMaterial = new THREE.MeshBasicMaterial({\n            color: visited ? 0x00ff00 : 0xff0000,\n            opacity: 0.7,\n            transparent: true\n          });\n          const countryMesh = new THREE.Mesh(shape, countryMaterial);\n          globe.add(countryMesh);\n        });\n      }).catch(error => console.error(\"Error loading GeoJSON data:\", error));\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = intersects[0].object; // Get the clicked country\n        setSelectedCountry(clickedCountry.userData); // Assuming country data is in userData\n      }\n    };\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Animate the globe\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n\n  // Function to create country shape from GeoJSON data\n  const createCountryShape = feature => {\n    const shape = new THREE.Shape();\n\n    // Parse GeoJSON coordinates and map them to a 3D plane\n    feature.geometry.coordinates[0].forEach((coordinate, index) => {\n      const [x, y] = coordinate; // Assuming 2D lat/lon coordinates, convert to x, y on the globe\n      const mappedX = x * (Math.PI / 180) * 5; // Map latitude to x\n      const mappedY = y * (Math.PI / 180) * 5; // Map longitude to y\n      if (index === 0) {\n        shape.moveTo(mappedX, mappedY);\n      } else {\n        shape.lineTo(mappedX, mappedY);\n      }\n    });\n    return new THREE.ShapeGeometry(shape);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"ICLs415NKmqoStji4l/BqS40j/0=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","axios","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","get","then","response","data","catch","error","console","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","current","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","fetch","json","geoData","features","forEach","feature","countryName","properties","ADMIN","countryData","find","c","name","visited","shape","createCountryShape","countryMaterial","opacity","transparent","countryMesh","handleMouseClick","event","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","children","length","clickedCountry","object","userData","addEventListener","animate","requestAnimationFrame","render","removeEventListener","Shape","coordinates","coordinate","index","mappedX","Math","PI","mappedY","moveTo","lineTo","ShapeGeometry","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let renderer, scene, camera, globe;\n\n  useEffect(() => {\n    // Fetch country visit data from the API\n    axios\n      .get(\"http://localhost:3001/countries\")\n      .then((response) => {\n        setCountries(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching countries\", error);\n      });\n\n    // Set up the Three.js scene (ensure it's only set up once)\n    if (!renderer && !scene && !camera) {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      globeRef.current.appendChild(renderer.domElement);\n\n      // Create a sphere for the globe\n      const geometry = new THREE.SphereGeometry(5, 32, 32);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true,\n      });\n      globe = new THREE.Mesh(geometry, material);\n      scene.add(globe);\n\n      camera.position.z = 10;\n\n      // Fetch the GeoJSON data using fetch\n      fetch(\"/data/countries.geojson\")\n        .then((response) => response.json())\n        .then((geoData) => {\n          geoData.features.forEach((feature) => {\n            const countryName = feature.properties.ADMIN; // 'ADMIN' is the property name for country names\n\n            // Find if the country has been visited\n            const countryData = countries.find((c) => c.name === countryName);\n            const visited = countryData ? countryData.visited : false;\n\n            // Create country shape from GeoJSON\n            const shape = createCountryShape(feature);\n\n            // Assign color based on visit status (green for visited, red for not visited)\n            const countryMaterial = new THREE.MeshBasicMaterial({\n              color: visited ? 0x00ff00 : 0xff0000,\n              opacity: 0.7,\n              transparent: true,\n            });\n\n            const countryMesh = new THREE.Mesh(shape, countryMaterial);\n            globe.add(countryMesh);\n          });\n        })\n        .catch((error) => console.error(\"Error loading GeoJSON data:\", error));\n    }\n\n    // Detect clicks on the globe\n    const handleMouseClick = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const clickedCountry = intersects[0].object; // Get the clicked country\n        setSelectedCountry(clickedCountry.userData); // Assuming country data is in userData\n      }\n    };\n\n    window.addEventListener(\"click\", handleMouseClick);\n\n    // Animate the globe\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up event listener on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n    };\n  }, [countries]);\n\n  // Function to create country shape from GeoJSON data\n  const createCountryShape = (feature) => {\n    const shape = new THREE.Shape();\n\n    // Parse GeoJSON coordinates and map them to a 3D plane\n    feature.geometry.coordinates[0].forEach((coordinate, index) => {\n      const [x, y] = coordinate; // Assuming 2D lat/lon coordinates, convert to x, y on the globe\n      const mappedX = x * (Math.PI / 180) * 5; // Map latitude to x\n      const mappedY = y * (Math.PI / 180) * 5; // Map longitude to y\n      if (index === 0) {\n        shape.moveTo(mappedX, mappedY);\n      } else {\n        shape.lineTo(mappedX, mappedY);\n      }\n    });\n\n    return new THREE.ShapeGeometry(shape);\n  };\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}