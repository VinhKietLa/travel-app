{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false); // To track dragging state\n  const previousMousePosition = useRef({\n    x: 0,\n    y: 0\n  }); // Track previous mouse position\n  const spinSpeed = useRef(0.01); // Control the initial spin speed\n  const clickStart = useRef(null); // Track the position where the click starts\n\n  useEffect(() => {\n    // Load the GeoJSON file for country borders\n    fetch(\"/data/countries.geojson\").then(response => response.json()).then(geoData => {\n      setCountries(geoData.features);\n      if (!renderer.current && !scene.current && !camera.current) {\n        scene.current = new THREE.Scene();\n        camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        renderer.current = new THREE.WebGLRenderer();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n        globeRef.current.appendChild(renderer.current.domElement);\n        const geometry = new THREE.SphereGeometry(5, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0x87ceeb,\n          wireframe: false\n        });\n        globe.current = new THREE.Mesh(geometry, material);\n        scene.current.add(globe.current);\n        camera.current.position.z = 10;\n        mapCountriesToGlobe(geoData.features);\n        const animate = () => {\n          requestAnimationFrame(animate);\n          if (!isDragging.current) {\n            globe.current.rotation.y += spinSpeed.current;\n          }\n          renderer.current.render(scene.current, camera.current);\n        };\n        animate();\n      }\n    }).catch(error => {\n      console.error(\"Error loading GeoJSON:\", error);\n    });\n\n    // Handle mouse down to track clicks and start dragging\n    const handleMouseDown = event => {\n      isDragging.current = false;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n\n    // Handle mouse move to rotate the globe\n    const handleMouseMove = event => {\n      const deltaMove = {\n        x: event.clientX - previousMousePosition.current.x,\n        y: event.clientY - previousMousePosition.current.y\n      };\n      if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n        isDragging.current = true; // Mark as dragging if the movement exceeds a threshold\n      }\n      if (isDragging.current) {\n        globe.current.rotation.y += deltaMove.x * 0.005; // Adjust rotation speed\n        globe.current.rotation.x += deltaMove.y * 0.005; // You can control X rotation as well\n      }\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n\n    // Handle mouse up to stop dragging and check for clicks on countries\n    const handleMouseUp = event => {\n      if (!isDragging.current) {\n        const mouse = {\n          x: event.clientX / window.innerWidth * 2 - 1,\n          y: -(event.clientY / window.innerHeight) * 2 + 1\n        };\n        raycaster.setFromCamera(mouse, camera.current);\n        const intersects = raycaster.intersectObjects(scene.current.children, true);\n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object;\n          if (clickedObject && clickedObject.userData && clickedObject.userData.isCountry) {\n            const clickedCountry = countries.find(country => {\n              return country.properties.ADMIN === clickedObject.userData.name;\n            });\n            if (clickedCountry) {\n              setSelectedCountry(clickedCountry);\n            }\n          } else {\n            setSelectedCountry(null); // Close the modal if not clicking on a country\n          }\n        }\n      }\n    };\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [countries]);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = features => {\n    features.forEach(feature => {\n      const {\n        coordinates\n      } = feature.geometry;\n      const countryGroup = new THREE.Group();\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, feature.properties.ADMIN);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach(polygon => {\n          mapPolygonToGlobe(polygon, countryGroup, feature.properties.ADMIN);\n        });\n      }\n      globe.current.add(countryGroup);\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryName) => {\n    polygon.forEach(coordSet => {\n      const points = [];\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n        points.push(new THREE.Vector3(x, y, z));\n      });\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true\n      });\n      const line = new THREE.Line(geometry, material);\n      line.userData = {\n        isCountry: true,\n        name: countryName\n      };\n      countryGroup.add(line);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"MJYp0TLeUlHKFoC+30P/HwQ7Lgs=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","isDragging","previousMousePosition","x","y","spinSpeed","clickStart","fetch","then","response","json","geoData","features","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","mapCountriesToGlobe","animate","requestAnimationFrame","rotation","render","catch","error","console","handleMouseDown","event","clientX","clientY","handleMouseMove","deltaMove","Math","abs","handleMouseUp","setFromCamera","intersects","intersectObjects","children","length","clickedObject","object","userData","isCountry","clickedCountry","find","country","properties","ADMIN","name","addEventListener","removeEventListener","forEach","feature","coordinates","countryGroup","Group","type","mapPolygonToGlobe","polygon","countryName","coordSet","points","longitude","latitude","phi","PI","theta","sin","cos","push","Vector3","BufferGeometry","setFromPoints","LineBasicMaterial","linewidth","opacity","transparent","line","Line","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","countryData","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false); // To track dragging state\n  const previousMousePosition = useRef({ x: 0, y: 0 }); // Track previous mouse position\n  const spinSpeed = useRef(0.01); // Control the initial spin speed\n  const clickStart = useRef(null); // Track the position where the click starts\n\n  useEffect(() => {\n    // Load the GeoJSON file for country borders\n    fetch(\"/data/countries.geojson\")\n      .then((response) => response.json())\n      .then((geoData) => {\n        setCountries(geoData.features);\n\n        if (!renderer.current && !scene.current && !camera.current) {\n          scene.current = new THREE.Scene();\n          camera.current = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n          );\n          renderer.current = new THREE.WebGLRenderer();\n          renderer.current.setSize(window.innerWidth, window.innerHeight);\n          globeRef.current.appendChild(renderer.current.domElement);\n\n          const geometry = new THREE.SphereGeometry(5, 32, 32);\n          const material = new THREE.MeshBasicMaterial({\n            color: 0x87ceeb,\n            wireframe: false,\n          });\n          globe.current = new THREE.Mesh(geometry, material);\n          scene.current.add(globe.current);\n\n          camera.current.position.z = 10;\n\n          mapCountriesToGlobe(geoData.features);\n\n          const animate = () => {\n            requestAnimationFrame(animate);\n            if (!isDragging.current) {\n              globe.current.rotation.y += spinSpeed.current;\n            }\n            renderer.current.render(scene.current, camera.current);\n          };\n          animate();\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error loading GeoJSON:\", error);\n      });\n\n    // Handle mouse down to track clicks and start dragging\n    const handleMouseDown = (event) => {\n      isDragging.current = false;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    };\n\n    // Handle mouse move to rotate the globe\n    const handleMouseMove = (event) => {\n      const deltaMove = {\n        x: event.clientX - previousMousePosition.current.x,\n        y: event.clientY - previousMousePosition.current.y,\n      };\n\n      if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n        isDragging.current = true; // Mark as dragging if the movement exceeds a threshold\n      }\n\n      if (isDragging.current) {\n        globe.current.rotation.y += deltaMove.x * 0.005; // Adjust rotation speed\n        globe.current.rotation.x += deltaMove.y * 0.005; // You can control X rotation as well\n      }\n\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    };\n\n    // Handle mouse up to stop dragging and check for clicks on countries\n    const handleMouseUp = (event) => {\n      if (!isDragging.current) {\n        const mouse = {\n          x: (event.clientX / window.innerWidth) * 2 - 1,\n          y: -(event.clientY / window.innerHeight) * 2 + 1,\n        };\n        raycaster.setFromCamera(mouse, camera.current);\n\n        const intersects = raycaster.intersectObjects(\n          scene.current.children,\n          true\n        );\n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object;\n\n          if (\n            clickedObject &&\n            clickedObject.userData &&\n            clickedObject.userData.isCountry\n          ) {\n            const clickedCountry = countries.find((country) => {\n              return country.properties.ADMIN === clickedObject.userData.name;\n            });\n\n            if (clickedCountry) {\n              setSelectedCountry(clickedCountry);\n            }\n          } else {\n            setSelectedCountry(null); // Close the modal if not clicking on a country\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [countries]);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = (features) => {\n    features.forEach((feature) => {\n      const { coordinates } = feature.geometry;\n      const countryGroup = new THREE.Group();\n\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, feature.properties.ADMIN);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach((polygon) => {\n          mapPolygonToGlobe(polygon, countryGroup, feature.properties.ADMIN);\n        });\n      }\n\n      globe.current.add(countryGroup);\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryName) => {\n    polygon.forEach((coordSet) => {\n      const points = [];\n\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n\n        points.push(new THREE.Vector3(x, y, z));\n      });\n\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff, // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true,\n      });\n      const line = new THREE.Line(geometry, material);\n\n      line.userData = {\n        isCountry: true,\n        name: countryName,\n      };\n\n      countryGroup.add(line);\n    });\n  };\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}