{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n\n  // Use useRef to persist these objects across renders\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false); // To track dragging state\n  const previousMousePosition = useRef({\n    x: 0,\n    y: 0\n  }); // Track previous mouse position\n  const spinSpeed = useRef(0.01); // Control the initial spin speed\n\n  useEffect(() => {\n    // Load the GeoJSON file for country borders\n    fetch(\"/data/countries.geojson\").then(response => response.json()).then(geoData => {\n      setCountries(geoData.features); // Save the GeoJSON country features\n\n      // Set up the Three.js scene (ensure it's only set up once)\n      if (!renderer.current && !scene.current && !camera.current) {\n        scene.current = new THREE.Scene();\n        camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        renderer.current = new THREE.WebGLRenderer();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n        globeRef.current.appendChild(renderer.current.domElement);\n\n        // Create a sphere for the globe (earth)\n        const geometry = new THREE.SphereGeometry(5, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0x87ceeb,\n          // Sky-blue color for the earth\n          wireframe: false\n        });\n        globe.current = new THREE.Mesh(geometry, material);\n        scene.current.add(globe.current);\n        camera.current.position.z = 10;\n\n        // Map country borders onto the globe\n        mapCountriesToGlobe(geoData.features);\n\n        // Animation function to spin the globe\n        const animate = () => {\n          requestAnimationFrame(animate);\n\n          // If the user is not dragging, continue auto-rotation\n          if (!isDragging.current) {\n            globe.current.rotation.y += spinSpeed.current;\n          }\n          renderer.current.render(scene.current, camera.current);\n        };\n        animate();\n      }\n    }).catch(error => {\n      console.error(\"Error loading GeoJSON:\", error);\n    });\n\n    // Detect clicks on the globe\n    const handleMouseClick = event => {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera.current);\n      const intersects = raycaster.intersectObjects(scene.current.children, true); // Enable recursive intersection\n\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n\n        // Check if the clicked object is a country by looking at its userData\n        if (clickedObject && clickedObject.userData && clickedObject.userData.isCountry) {\n          const clickedCountry = countries.find(country => {\n            return country.properties.ADMIN === clickedObject.userData.name;\n          });\n          if (clickedCountry) {\n            setSelectedCountry(clickedCountry); // Open the modal with the clicked country data\n          }\n        } else {\n          // Close the modal if clicking on empty space or a non-country object\n          setSelectedCountry(null);\n        }\n      } else {\n        // Close the modal if no object was clicked\n        setSelectedCountry(null);\n      }\n    };\n\n    // Handle mouse down to start dragging\n    const handleMouseDown = event => {\n      isDragging.current = true;\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n\n    // Handle mouse move to rotate the globe\n    const handleMouseMove = event => {\n      if (!isDragging.current) return;\n      const deltaMove = {\n        x: event.clientX - previousMousePosition.current.x,\n        y: event.clientY - previousMousePosition.current.y\n      };\n      globe.current.rotation.y += deltaMove.x * 0.005; // Adjust rotation speed\n      globe.current.rotation.x += deltaMove.y * 0.005; // You can control X rotation as well\n\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n\n    // Handle mouse up to stop dragging\n    const handleMouseUp = () => {\n      isDragging.current = false; // Stop dragging\n    };\n    window.addEventListener(\"click\", handleMouseClick);\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    // Clean up event listeners on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [countries]);\n\n  // Function to map GeoJSON countries onto the globe using line segments\n  const mapCountriesToGlobe = features => {\n    features.forEach(feature => {\n      const {\n        coordinates\n      } = feature.geometry;\n      const countryGroup = new THREE.Group();\n\n      // Check if we are dealing with a Polygon or MultiPolygon\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, feature.properties.ADMIN);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach(polygon => {\n          mapPolygonToGlobe(polygon, countryGroup, feature.properties.ADMIN);\n        });\n      }\n\n      // Add the country group (either a single or multiple polygons) to the globe\n      globe.current.add(countryGroup);\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryName) => {\n    polygon.forEach(coordSet => {\n      const points = [];\n      coordSet.forEach(([longitude, latitude]) => {\n        // Convert latitude and longitude to 3D coordinates\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n        points.push(new THREE.Vector3(x, y, z));\n      });\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true\n      });\n      const line = new THREE.Line(geometry, material);\n\n      // Assign userData so we can identify this country later\n      line.userData = {\n        isCountry: true,\n        name: countryName\n      };\n      countryGroup.add(line);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"zMzpJa5jQRaxoTRiXZNR4/BYRPs=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","countries","setCountries","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","isDragging","previousMousePosition","x","y","spinSpeed","fetch","then","response","json","geoData","features","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","mapCountriesToGlobe","animate","requestAnimationFrame","rotation","render","catch","error","console","handleMouseClick","event","clientX","clientY","setFromCamera","intersects","intersectObjects","children","length","clickedObject","object","userData","isCountry","clickedCountry","find","country","properties","ADMIN","name","handleMouseDown","handleMouseMove","deltaMove","handleMouseUp","addEventListener","removeEventListener","forEach","feature","coordinates","countryGroup","Group","type","mapPolygonToGlobe","polygon","countryName","coordSet","points","longitude","latitude","phi","Math","PI","theta","sin","cos","push","Vector3","BufferGeometry","setFromPoints","LineBasicMaterial","linewidth","opacity","transparent","line","Line","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","countryData","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n\n  // Use useRef to persist these objects across renders\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false); // To track dragging state\n  const previousMousePosition = useRef({ x: 0, y: 0 }); // Track previous mouse position\n  const spinSpeed = useRef(0.01); // Control the initial spin speed\n\n  useEffect(() => {\n    // Load the GeoJSON file for country borders\n    fetch(\"/data/countries.geojson\")\n      .then((response) => response.json())\n      .then((geoData) => {\n        setCountries(geoData.features); // Save the GeoJSON country features\n\n        // Set up the Three.js scene (ensure it's only set up once)\n        if (!renderer.current && !scene.current && !camera.current) {\n          scene.current = new THREE.Scene();\n          camera.current = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n          );\n          renderer.current = new THREE.WebGLRenderer();\n          renderer.current.setSize(window.innerWidth, window.innerHeight);\n          globeRef.current.appendChild(renderer.current.domElement);\n\n          // Create a sphere for the globe (earth)\n          const geometry = new THREE.SphereGeometry(5, 32, 32);\n          const material = new THREE.MeshBasicMaterial({\n            color: 0x87ceeb, // Sky-blue color for the earth\n            wireframe: false,\n          });\n          globe.current = new THREE.Mesh(geometry, material);\n          scene.current.add(globe.current);\n\n          camera.current.position.z = 10;\n\n          // Map country borders onto the globe\n          mapCountriesToGlobe(geoData.features);\n\n          // Animation function to spin the globe\n          const animate = () => {\n            requestAnimationFrame(animate);\n\n            // If the user is not dragging, continue auto-rotation\n            if (!isDragging.current) {\n              globe.current.rotation.y += spinSpeed.current;\n            }\n\n            renderer.current.render(scene.current, camera.current);\n          };\n          animate();\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error loading GeoJSON:\", error);\n      });\n\n    // Detect clicks on the globe\n    const handleMouseClick = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera.current);\n\n      const intersects = raycaster.intersectObjects(\n        scene.current.children,\n        true\n      ); // Enable recursive intersection\n\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n\n        // Check if the clicked object is a country by looking at its userData\n        if (\n          clickedObject &&\n          clickedObject.userData &&\n          clickedObject.userData.isCountry\n        ) {\n          const clickedCountry = countries.find((country) => {\n            return country.properties.ADMIN === clickedObject.userData.name;\n          });\n\n          if (clickedCountry) {\n            setSelectedCountry(clickedCountry); // Open the modal with the clicked country data\n          }\n        } else {\n          // Close the modal if clicking on empty space or a non-country object\n          setSelectedCountry(null);\n        }\n      } else {\n        // Close the modal if no object was clicked\n        setSelectedCountry(null);\n      }\n    };\n\n    // Handle mouse down to start dragging\n    const handleMouseDown = (event) => {\n      isDragging.current = true;\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    };\n\n    // Handle mouse move to rotate the globe\n    const handleMouseMove = (event) => {\n      if (!isDragging.current) return;\n\n      const deltaMove = {\n        x: event.clientX - previousMousePosition.current.x,\n        y: event.clientY - previousMousePosition.current.y,\n      };\n\n      globe.current.rotation.y += deltaMove.x * 0.005; // Adjust rotation speed\n      globe.current.rotation.x += deltaMove.y * 0.005; // You can control X rotation as well\n\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    };\n\n    // Handle mouse up to stop dragging\n    const handleMouseUp = () => {\n      isDragging.current = false; // Stop dragging\n    };\n\n    window.addEventListener(\"click\", handleMouseClick);\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    // Clean up event listeners on unmount\n    return () => {\n      window.removeEventListener(\"click\", handleMouseClick);\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [countries]);\n\n  // Function to map GeoJSON countries onto the globe using line segments\n  const mapCountriesToGlobe = (features) => {\n    features.forEach((feature) => {\n      const { coordinates } = feature.geometry;\n      const countryGroup = new THREE.Group();\n\n      // Check if we are dealing with a Polygon or MultiPolygon\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, feature.properties.ADMIN);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach((polygon) => {\n          mapPolygonToGlobe(polygon, countryGroup, feature.properties.ADMIN);\n        });\n      }\n\n      // Add the country group (either a single or multiple polygons) to the globe\n      globe.current.add(countryGroup);\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryName) => {\n    polygon.forEach((coordSet) => {\n      const points = [];\n\n      coordSet.forEach(([longitude, latitude]) => {\n        // Convert latitude and longitude to 3D coordinates\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n\n        points.push(new THREE.Vector3(x, y, z));\n      });\n\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff, // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true,\n      });\n      const line = new THREE.Line(geometry, material);\n\n      // Assign userData so we can identify this country later\n      line.userData = {\n        isCountry: true,\n        name: countryName,\n      };\n\n      countryGroup.add(line);\n    });\n  };\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}