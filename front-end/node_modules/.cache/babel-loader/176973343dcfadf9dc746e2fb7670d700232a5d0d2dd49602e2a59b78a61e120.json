{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [geoJsonCountries, setGeoJsonCountries] = useState([]); // GeoJSON data for globe rendering\n  const [countriesData, setCountriesData] = useState([]);\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false);\n  const clickStart = useRef(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  useEffect(() => {\n    axios.get(\"http://localhost:3000/countries\").then(response => {\n      setCountriesData(response.data); // Store the detailed countries data from the backend\n    }).catch(error => {\n      console.error(\"Error fetching countries data:\", error);\n    });\n    // Load the GeoJSON file for country borders (for globe rendering)\n    fetch(\"/data/countries.geojson\").then(response => response.json()).then(geoData => {\n      setGeoJsonCountries(geoData.features); // Store GeoJSON data\n\n      if (!renderer.current && !scene.current && !camera.current) {\n        scene.current = new THREE.Scene();\n        camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        renderer.current = new THREE.WebGLRenderer();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n        globeRef.current.appendChild(renderer.current.domElement);\n        const geometry = new THREE.SphereGeometry(5, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0x87ceeb,\n          wireframe: false\n        });\n        globe.current = new THREE.Mesh(geometry, material);\n        scene.current.add(globe.current);\n        camera.current.position.z = 10;\n        mapCountriesToGlobe(geoData.features); // Map GeoJSON data to the globe\n\n        const animate = () => {\n          requestAnimationFrame(animate);\n          if (!isDragging.current) {\n            globe.current.rotation.y += 0.01;\n          }\n          renderer.current.render(scene.current, camera.current);\n        };\n        animate();\n      }\n    }).catch(error => {\n      console.error(\"Error loading GeoJSON:\", error);\n    });\n\n    // Mouse interaction handlers\n    const handleMouseDown = event => {\n      isDragging.current = false;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n    const handleMouseMove = event => {\n      if (!clickStart.current) return;\n      const deltaMove = {\n        x: event.clientX - clickStart.current.x,\n        y: event.clientY - clickStart.current.y\n      };\n      if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n        isDragging.current = true;\n        globe.current.rotation.y += deltaMove.x * 0.005;\n        globe.current.rotation.x += deltaMove.y * 0.005;\n        clickStart.current = {\n          x: event.clientX,\n          y: event.clientY\n        };\n      }\n    };\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = features => {\n    features.forEach(feature => {\n      const {\n        coordinates\n      } = feature.geometry;\n      const countryGroup = new THREE.Group();\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach(polygon => {\n          mapPolygonToGlobe(polygon, countryGroup);\n        });\n      }\n      globe.current.add(countryGroup); // Add the country group to the globe\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup) => {\n    polygon.forEach(coordSet => {\n      const points = [];\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n        points.push(new THREE.Vector3(x, y, z));\n      });\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true\n      });\n      const line = new THREE.Line(geometry, material);\n      countryGroup.add(line);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 10\n  }, this);\n};\n_s(Globe, \"xDUAdKsA0KXzFbOwq62za0ot9S4=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","axios","jsxDEV","_jsxDEV","Globe","_s","globeRef","geoJsonCountries","setGeoJsonCountries","countriesData","setCountriesData","renderer","scene","camera","globe","isDragging","clickStart","raycaster","Raycaster","mouse","Vector2","get","then","response","data","catch","error","console","fetch","json","geoData","features","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","mapCountriesToGlobe","animate","requestAnimationFrame","rotation","y","render","handleMouseDown","event","x","clientX","clientY","handleMouseMove","deltaMove","Math","abs","addEventListener","removeEventListener","forEach","feature","coordinates","countryGroup","Group","type","mapPolygonToGlobe","polygon","coordSet","points","longitude","latitude","phi","PI","theta","sin","cos","push","Vector3","BufferGeometry","setFromPoints","LineBasicMaterial","linewidth","opacity","transparent","line","Line","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [geoJsonCountries, setGeoJsonCountries] = useState([]); // GeoJSON data for globe rendering\n  const [countriesData, setCountriesData] = useState([]);\n\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false);\n  const clickStart = useRef(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:3000/countries\")\n      .then((response) => {\n        setCountriesData(response.data); // Store the detailed countries data from the backend\n      })\n      .catch((error) => {\n        console.error(\"Error fetching countries data:\", error);\n      });\n    // Load the GeoJSON file for country borders (for globe rendering)\n    fetch(\"/data/countries.geojson\")\n      .then((response) => response.json())\n      .then((geoData) => {\n        setGeoJsonCountries(geoData.features); // Store GeoJSON data\n\n        if (!renderer.current && !scene.current && !camera.current) {\n          scene.current = new THREE.Scene();\n          camera.current = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n          );\n          renderer.current = new THREE.WebGLRenderer();\n          renderer.current.setSize(window.innerWidth, window.innerHeight);\n          globeRef.current.appendChild(renderer.current.domElement);\n\n          const geometry = new THREE.SphereGeometry(5, 32, 32);\n          const material = new THREE.MeshBasicMaterial({\n            color: 0x87ceeb,\n            wireframe: false,\n          });\n          globe.current = new THREE.Mesh(geometry, material);\n          scene.current.add(globe.current);\n\n          camera.current.position.z = 10;\n\n          mapCountriesToGlobe(geoData.features); // Map GeoJSON data to the globe\n\n          const animate = () => {\n            requestAnimationFrame(animate);\n            if (!isDragging.current) {\n              globe.current.rotation.y += 0.01;\n            }\n            renderer.current.render(scene.current, camera.current);\n          };\n          animate();\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error loading GeoJSON:\", error);\n      });\n\n    // Mouse interaction handlers\n    const handleMouseDown = (event) => {\n      isDragging.current = false;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    };\n\n    const handleMouseMove = (event) => {\n      if (!clickStart.current) return;\n\n      const deltaMove = {\n        x: event.clientX - clickStart.current.x,\n        y: event.clientY - clickStart.current.y,\n      };\n\n      if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n        isDragging.current = true;\n        globe.current.rotation.y += deltaMove.x * 0.005;\n        globe.current.rotation.x += deltaMove.y * 0.005;\n        clickStart.current = {\n          x: event.clientX,\n          y: event.clientY,\n        };\n      }\n    };\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = (features) => {\n    features.forEach((feature) => {\n      const { coordinates } = feature.geometry;\n      const countryGroup = new THREE.Group();\n\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach((polygon) => {\n          mapPolygonToGlobe(polygon, countryGroup);\n        });\n      }\n\n      globe.current.add(countryGroup); // Add the country group to the globe\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup) => {\n    polygon.forEach((coordSet) => {\n      const points = [];\n\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n\n        points.push(new THREE.Vector3(x, y, z));\n      });\n\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: 0xffffff, // White color for country borders\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true,\n      });\n      const line = new THREE.Line(geometry, material);\n      countryGroup.add(line);\n    });\n  };\n\n  return <div ref={globeRef} />;\n};\n\nexport default Globe;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGR,MAAM,CAAC,CAAC;EACzB,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMY,QAAQ,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMc,KAAK,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMe,MAAM,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMgB,KAAK,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMiB,UAAU,GAAGjB,MAAM,CAAC,KAAK,CAAC;EAChC,MAAMkB,UAAU,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMmB,SAAS,GAAG,IAAIjB,KAAK,CAACkB,SAAS,CAAC,CAAC;EACvC,MAAMC,KAAK,GAAG,IAAInB,KAAK,CAACoB,OAAO,CAAC,CAAC;EAEjCvB,SAAS,CAAC,MAAM;IACdI,KAAK,CACFoB,GAAG,CAAC,iCAAiC,CAAC,CACtCC,IAAI,CAAEC,QAAQ,IAAK;MAClBb,gBAAgB,CAACa,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;IACJ;IACAE,KAAK,CAAC,yBAAyB,CAAC,CAC7BN,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACnCP,IAAI,CAAEQ,OAAO,IAAK;MACjBtB,mBAAmB,CAACsB,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC;;MAEvC,IAAI,CAACpB,QAAQ,CAACqB,OAAO,IAAI,CAACpB,KAAK,CAACoB,OAAO,IAAI,CAACnB,MAAM,CAACmB,OAAO,EAAE;QAC1DpB,KAAK,CAACoB,OAAO,GAAG,IAAIhC,KAAK,CAACiC,KAAK,CAAC,CAAC;QACjCpB,MAAM,CAACmB,OAAO,GAAG,IAAIhC,KAAK,CAACkC,iBAAiB,CAC1C,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;QACD1B,QAAQ,CAACqB,OAAO,GAAG,IAAIhC,KAAK,CAACsC,aAAa,CAAC,CAAC;QAC5C3B,QAAQ,CAACqB,OAAO,CAACO,OAAO,CAACJ,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;QAC/D/B,QAAQ,CAAC0B,OAAO,CAACQ,WAAW,CAAC7B,QAAQ,CAACqB,OAAO,CAACS,UAAU,CAAC;QAEzD,MAAMC,QAAQ,GAAG,IAAI1C,KAAK,CAAC2C,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QACpD,MAAMC,QAAQ,GAAG,IAAI5C,KAAK,CAAC6C,iBAAiB,CAAC;UAC3CC,KAAK,EAAE,QAAQ;UACfC,SAAS,EAAE;QACb,CAAC,CAAC;QACFjC,KAAK,CAACkB,OAAO,GAAG,IAAIhC,KAAK,CAACgD,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;QAClDhC,KAAK,CAACoB,OAAO,CAACiB,GAAG,CAACnC,KAAK,CAACkB,OAAO,CAAC;QAEhCnB,MAAM,CAACmB,OAAO,CAACkB,QAAQ,CAACC,CAAC,GAAG,EAAE;QAE9BC,mBAAmB,CAACtB,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC;;QAEvC,MAAMsB,OAAO,GAAGA,CAAA,KAAM;UACpBC,qBAAqB,CAACD,OAAO,CAAC;UAC9B,IAAI,CAACtC,UAAU,CAACiB,OAAO,EAAE;YACvBlB,KAAK,CAACkB,OAAO,CAACuB,QAAQ,CAACC,CAAC,IAAI,IAAI;UAClC;UACA7C,QAAQ,CAACqB,OAAO,CAACyB,MAAM,CAAC7C,KAAK,CAACoB,OAAO,EAAEnB,MAAM,CAACmB,OAAO,CAAC;QACxD,CAAC;QACDqB,OAAO,CAAC,CAAC;MACX;IACF,CAAC,CAAC,CACD5B,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;;IAEJ;IACA,MAAMgC,eAAe,GAAIC,KAAK,IAAK;MACjC5C,UAAU,CAACiB,OAAO,GAAG,KAAK;MAC1BhB,UAAU,CAACgB,OAAO,GAAG;QACnB4B,CAAC,EAAED,KAAK,CAACE,OAAO;QAChBL,CAAC,EAAEG,KAAK,CAACG;MACX,CAAC;IACH,CAAC;IAED,MAAMC,eAAe,GAAIJ,KAAK,IAAK;MACjC,IAAI,CAAC3C,UAAU,CAACgB,OAAO,EAAE;MAEzB,MAAMgC,SAAS,GAAG;QAChBJ,CAAC,EAAED,KAAK,CAACE,OAAO,GAAG7C,UAAU,CAACgB,OAAO,CAAC4B,CAAC;QACvCJ,CAAC,EAAEG,KAAK,CAACG,OAAO,GAAG9C,UAAU,CAACgB,OAAO,CAACwB;MACxC,CAAC;MAED,IAAIS,IAAI,CAACC,GAAG,CAACF,SAAS,CAACJ,CAAC,CAAC,GAAG,CAAC,IAAIK,IAAI,CAACC,GAAG,CAACF,SAAS,CAACR,CAAC,CAAC,GAAG,CAAC,EAAE;QAC1DzC,UAAU,CAACiB,OAAO,GAAG,IAAI;QACzBlB,KAAK,CAACkB,OAAO,CAACuB,QAAQ,CAACC,CAAC,IAAIQ,SAAS,CAACJ,CAAC,GAAG,KAAK;QAC/C9C,KAAK,CAACkB,OAAO,CAACuB,QAAQ,CAACK,CAAC,IAAII,SAAS,CAACR,CAAC,GAAG,KAAK;QAC/CxC,UAAU,CAACgB,OAAO,GAAG;UACnB4B,CAAC,EAAED,KAAK,CAACE,OAAO;UAChBL,CAAC,EAAEG,KAAK,CAACG;QACX,CAAC;MACH;IACF,CAAC;IAED3B,MAAM,CAACgC,gBAAgB,CAAC,WAAW,EAAET,eAAe,CAAC;IACrDvB,MAAM,CAACgC,gBAAgB,CAAC,WAAW,EAAEJ,eAAe,CAAC;IAErD,OAAO,MAAM;MACX5B,MAAM,CAACiC,mBAAmB,CAAC,WAAW,EAAEV,eAAe,CAAC;MACxDvB,MAAM,CAACiC,mBAAmB,CAAC,WAAW,EAAEL,eAAe,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMX,mBAAmB,GAAIrB,QAAQ,IAAK;IACxCA,QAAQ,CAACsC,OAAO,CAAEC,OAAO,IAAK;MAC5B,MAAM;QAAEC;MAAY,CAAC,GAAGD,OAAO,CAAC5B,QAAQ;MACxC,MAAM8B,YAAY,GAAG,IAAIxE,KAAK,CAACyE,KAAK,CAAC,CAAC;MAEtC,IAAIH,OAAO,CAAC5B,QAAQ,CAACgC,IAAI,KAAK,SAAS,EAAE;QACvCC,iBAAiB,CAACJ,WAAW,EAAEC,YAAY,CAAC;MAC9C,CAAC,MAAM,IAAIF,OAAO,CAAC5B,QAAQ,CAACgC,IAAI,KAAK,cAAc,EAAE;QACnDH,WAAW,CAACF,OAAO,CAAEO,OAAO,IAAK;UAC/BD,iBAAiB,CAACC,OAAO,EAAEJ,YAAY,CAAC;QAC1C,CAAC,CAAC;MACJ;MAEA1D,KAAK,CAACkB,OAAO,CAACiB,GAAG,CAACuB,YAAY,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAGA,CAACC,OAAO,EAAEJ,YAAY,KAAK;IACnDI,OAAO,CAACP,OAAO,CAAEQ,QAAQ,IAAK;MAC5B,MAAMC,MAAM,GAAG,EAAE;MAEjBD,QAAQ,CAACR,OAAO,CAAC,CAAC,CAACU,SAAS,EAAEC,QAAQ,CAAC,KAAK;QAC1C,MAAMC,GAAG,GAAG,CAAC,EAAE,GAAGD,QAAQ,KAAKf,IAAI,CAACiB,EAAE,GAAG,GAAG,CAAC;QAC7C,MAAMC,KAAK,GAAG,CAACJ,SAAS,GAAG,GAAG,KAAKd,IAAI,CAACiB,EAAE,GAAG,GAAG,CAAC;QAEjD,MAAMtB,CAAC,GAAG,CAAC,GAAGK,IAAI,CAACmB,GAAG,CAACH,GAAG,CAAC,GAAGhB,IAAI,CAACoB,GAAG,CAACF,KAAK,CAAC;QAC7C,MAAM3B,CAAC,GAAG,CAAC,GAAGS,IAAI,CAACoB,GAAG,CAACJ,GAAG,CAAC;QAC3B,MAAM9B,CAAC,GAAG,CAAC,GAAGc,IAAI,CAACmB,GAAG,CAACH,GAAG,CAAC,GAAGhB,IAAI,CAACmB,GAAG,CAACD,KAAK,CAAC;QAE7CL,MAAM,CAACQ,IAAI,CAAC,IAAItF,KAAK,CAACuF,OAAO,CAAC3B,CAAC,EAAEJ,CAAC,EAAEL,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC;MAEF,MAAMT,QAAQ,GAAG,IAAI1C,KAAK,CAACwF,cAAc,CAAC,CAAC,CAACC,aAAa,CAACX,MAAM,CAAC;MACjE,MAAMlC,QAAQ,GAAG,IAAI5C,KAAK,CAAC0F,iBAAiB,CAAC;QAC3C5C,KAAK,EAAE,QAAQ;QAAE;QACjB6C,SAAS,EAAE,CAAC;QACZC,OAAO,EAAE,GAAG;QACZC,WAAW,EAAE;MACf,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,IAAI9F,KAAK,CAAC+F,IAAI,CAACrD,QAAQ,EAAEE,QAAQ,CAAC;MAC/C4B,YAAY,CAACvB,GAAG,CAAC6C,IAAI,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC;EAED,oBAAO3F,OAAA;IAAK6F,GAAG,EAAE1F;EAAS;IAAA2F,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/B,CAAC;AAAC/F,EAAA,CAvJID,KAAK;AAAAiG,EAAA,GAALjG,KAAK;AAyJX,eAAeA,KAAK;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}