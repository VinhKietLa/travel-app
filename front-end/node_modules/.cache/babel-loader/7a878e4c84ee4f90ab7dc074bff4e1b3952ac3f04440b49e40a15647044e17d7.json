{"ast":null,"code":"var _jsxFileName = \"/Users/kietla92/travel-app/front-end/src/components/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\"; // Ensure axios is installed\nimport CountryModal from \"./CountryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const globeRef = useRef();\n  const [geoJsonCountries, setGeoJsonCountries] = useState([]); // GeoJSON data for globe rendering\n  const [countriesData, setCountriesData] = useState([]); // Detailed data from backend\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false);\n  const clickStart = useRef(null);\n  useEffect(() => {\n    // Fetch country details (hardcoded data) from the backend\n    axios.get(\"http://localhost:3000/countries\").then(response => {\n      setCountriesData(response.data); // Store the detailed countries data from the backend\n    }).catch(error => {\n      console.error(\"Error fetching countries data:\", error);\n    });\n\n    // Load the GeoJSON file for country borders (for globe rendering)\n    fetch(\"/data/countries.geojson\").then(response => response.json()).then(geoData => {\n      setGeoJsonCountries(geoData.features);\n      if (!renderer.current && !scene.current && !camera.current) {\n        scene.current = new THREE.Scene();\n        camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        renderer.current = new THREE.WebGLRenderer();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n        globeRef.current.appendChild(renderer.current.domElement);\n        const geometry = new THREE.SphereGeometry(5, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0x87ceeb,\n          wireframe: false\n        });\n        globe.current = new THREE.Mesh(geometry, material);\n        scene.current.add(globe.current);\n        camera.current.position.z = 10;\n        const animate = () => {\n          requestAnimationFrame(animate);\n          if (!isDragging.current && globe.current) {\n            globe.current.rotation.y += 0.01;\n          }\n          renderer.current.render(scene.current, camera.current);\n        };\n        animate();\n      }\n    }).catch(error => {\n      console.error(\"Error loading GeoJSON:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    // Only proceed if both geoJsonCountries and countriesData are loaded\n    if (geoJsonCountries.length > 0 && countriesData.length > 0) {\n      mapCountriesToGlobe(geoJsonCountries);\n    }\n  }, [geoJsonCountries, countriesData]);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = features => {\n    features.forEach(feature => {\n      const {\n        coordinates\n      } = feature.geometry;\n      let countryName = feature.properties.admin.trim().toLowerCase(); // Normalize GeoJSON country name\n\n      console.log(`GeoJSON countryName (admin): ${countryName}`);\n\n      // Check if this country exists in hardcoded countriesData\n      const country = countriesData.find(c => c.name.trim().toLowerCase() === countryName);\n\n      // Set color based on whether the country is visited or not\n      const countryColor = country && country.visited ? 0x00ff00 : 0xff0000; // Green for visited, Red for not visited\n      console.log(`Coloring country: ${countryName} as ${countryColor === 0x00ff00 ? \"Green\" : \"Red\"}`);\n      const countryGroup = new THREE.Group();\n\n      // Render countries as polygons or multipolygons\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, countryColor, country);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach(polygon => {\n          mapPolygonToGlobe(polygon, countryGroup, countryColor, country);\n        });\n      }\n      globe.current.add(countryGroup); // Add the country group to the globe\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryColor, country) => {\n    polygon.forEach(coordSet => {\n      const points = [];\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n        points.push(new THREE.Vector3(x, y, z));\n      });\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: countryColor,\n        // Set the color (Green or Red)\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true\n      });\n      const line = new THREE.Line(geometry, material);\n\n      // Add the country's data to the userData of the line for later retrieval\n      line.userData = {\n        isCountry: true,\n        countryData: country // Store the country data here\n      };\n      countryGroup.add(line);\n    });\n  };\n\n  // Mouse interaction handlers\n  const handleMouseDown = event => {\n    isDragging.current = false;\n    clickStart.current = {\n      x: event.clientX,\n      y: event.clientY\n    };\n  };\n  const handleMouseMove = event => {\n    if (!clickStart.current || !globe.current) return; // Check if globe is initialized\n\n    const deltaMove = {\n      x: event.clientX - clickStart.current.x,\n      y: event.clientY - clickStart.current.y\n    };\n    if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n      isDragging.current = true;\n      globe.current.rotation.y += deltaMove.x * 0.005;\n      globe.current.rotation.x += deltaMove.y * 0.005;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }\n  };\n  const handleMouseUp = event => {\n    if (!isDragging.current && globe.current) {\n      const mouse = {\n        x: event.clientX / window.innerWidth * 2 - 1,\n        y: -(event.clientY / window.innerHeight) * 2 + 1\n      };\n      raycaster.setFromCamera(mouse, camera.current);\n      const intersects = raycaster.intersectObjects(scene.current.children, true);\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n        if (clickedObject && clickedObject.userData && clickedObject.userData.isCountry) {\n          const country = clickedObject.userData.countryData; // Retrieve the country data\n\n          if (country) {\n            setSelectedCountry(country); // Show country details in modal\n          }\n        }\n      }\n    }\n    clickStart.current = null;\n    isDragging.current = false;\n  };\n  window.addEventListener(\"mousedown\", handleMouseDown);\n  window.addEventListener(\"mousemove\", handleMouseMove);\n  window.addEventListener(\"mouseup\", handleMouseUp);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: globeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryModal, {\n      isOpen: !!selectedCountry,\n      countryData: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(Globe, \"dQSLz5AT0KccWRv/m3DplejZdZ4=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","axios","CountryModal","jsxDEV","_jsxDEV","Globe","_s","globeRef","geoJsonCountries","setGeoJsonCountries","countriesData","setCountriesData","selectedCountry","setSelectedCountry","raycaster","Raycaster","mouse","Vector2","renderer","scene","camera","globe","isDragging","clickStart","get","then","response","data","catch","error","console","fetch","json","geoData","features","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","Mesh","add","position","z","animate","requestAnimationFrame","rotation","y","render","length","mapCountriesToGlobe","forEach","feature","coordinates","countryName","properties","admin","trim","toLowerCase","log","country","find","c","name","countryColor","visited","countryGroup","Group","type","mapPolygonToGlobe","polygon","coordSet","points","longitude","latitude","phi","Math","PI","theta","x","sin","cos","push","Vector3","BufferGeometry","setFromPoints","LineBasicMaterial","linewidth","opacity","transparent","line","Line","userData","isCountry","countryData","handleMouseDown","event","clientX","clientY","handleMouseMove","deltaMove","abs","handleMouseUp","setFromCamera","intersects","intersectObjects","children","clickedObject","object","addEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/kietla92/travel-app/front-end/src/components/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\"; // Ensure axios is installed\nimport CountryModal from \"./CountryModal\";\n\nconst Globe = () => {\n  const globeRef = useRef();\n  const [geoJsonCountries, setGeoJsonCountries] = useState([]); // GeoJSON data for globe rendering\n  const [countriesData, setCountriesData] = useState([]); // Detailed data from backend\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n\n  const renderer = useRef(null);\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const globe = useRef(null);\n  const isDragging = useRef(false);\n  const clickStart = useRef(null);\n\n  useEffect(() => {\n    // Fetch country details (hardcoded data) from the backend\n    axios\n      .get(\"http://localhost:3000/countries\")\n      .then((response) => {\n        setCountriesData(response.data); // Store the detailed countries data from the backend\n      })\n      .catch((error) => {\n        console.error(\"Error fetching countries data:\", error);\n      });\n\n    // Load the GeoJSON file for country borders (for globe rendering)\n    fetch(\"/data/countries.geojson\")\n      .then((response) => response.json())\n      .then((geoData) => {\n        setGeoJsonCountries(geoData.features);\n\n        if (!renderer.current && !scene.current && !camera.current) {\n          scene.current = new THREE.Scene();\n          camera.current = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n          );\n          renderer.current = new THREE.WebGLRenderer();\n          renderer.current.setSize(window.innerWidth, window.innerHeight);\n          globeRef.current.appendChild(renderer.current.domElement);\n\n          const geometry = new THREE.SphereGeometry(5, 32, 32);\n          const material = new THREE.MeshBasicMaterial({\n            color: 0x87ceeb,\n            wireframe: false,\n          });\n          globe.current = new THREE.Mesh(geometry, material);\n          scene.current.add(globe.current);\n\n          camera.current.position.z = 10;\n\n          const animate = () => {\n            requestAnimationFrame(animate);\n            if (!isDragging.current && globe.current) {\n              globe.current.rotation.y += 0.01;\n            }\n            renderer.current.render(scene.current, camera.current);\n          };\n          animate();\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error loading GeoJSON:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Only proceed if both geoJsonCountries and countriesData are loaded\n    if (geoJsonCountries.length > 0 && countriesData.length > 0) {\n      mapCountriesToGlobe(geoJsonCountries);\n    }\n  }, [geoJsonCountries, countriesData]);\n\n  // Function to map GeoJSON countries onto the globe\n  const mapCountriesToGlobe = (features) => {\n    features.forEach((feature) => {\n      const { coordinates } = feature.geometry;\n      let countryName = feature.properties.admin.trim().toLowerCase(); // Normalize GeoJSON country name\n\n      console.log(`GeoJSON countryName (admin): ${countryName}`);\n\n      // Check if this country exists in hardcoded countriesData\n      const country = countriesData.find(\n        (c) => c.name.trim().toLowerCase() === countryName\n      );\n\n      // Set color based on whether the country is visited or not\n      const countryColor = country && country.visited ? 0x00ff00 : 0xff0000; // Green for visited, Red for not visited\n      console.log(\n        `Coloring country: ${countryName} as ${\n          countryColor === 0x00ff00 ? \"Green\" : \"Red\"\n        }`\n      );\n\n      const countryGroup = new THREE.Group();\n\n      // Render countries as polygons or multipolygons\n      if (feature.geometry.type === \"Polygon\") {\n        mapPolygonToGlobe(coordinates, countryGroup, countryColor, country);\n      } else if (feature.geometry.type === \"MultiPolygon\") {\n        coordinates.forEach((polygon) => {\n          mapPolygonToGlobe(polygon, countryGroup, countryColor, country);\n        });\n      }\n\n      globe.current.add(countryGroup); // Add the country group to the globe\n    });\n  };\n\n  // Helper function to map a single polygon to the globe\n  const mapPolygonToGlobe = (polygon, countryGroup, countryColor, country) => {\n    polygon.forEach((coordSet) => {\n      const points = [];\n\n      coordSet.forEach(([longitude, latitude]) => {\n        const phi = (90 - latitude) * (Math.PI / 180);\n        const theta = (longitude + 180) * (Math.PI / 180);\n\n        const x = 5 * Math.sin(phi) * Math.cos(theta);\n        const y = 5 * Math.cos(phi);\n        const z = 5 * Math.sin(phi) * Math.sin(theta);\n\n        points.push(new THREE.Vector3(x, y, z));\n      });\n\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const material = new THREE.LineBasicMaterial({\n        color: countryColor, // Set the color (Green or Red)\n        linewidth: 1,\n        opacity: 0.8,\n        transparent: true,\n      });\n      const line = new THREE.Line(geometry, material);\n\n      // Add the country's data to the userData of the line for later retrieval\n      line.userData = {\n        isCountry: true,\n        countryData: country, // Store the country data here\n      };\n\n      countryGroup.add(line);\n    });\n  };\n\n  // Mouse interaction handlers\n  const handleMouseDown = (event) => {\n    isDragging.current = false;\n    clickStart.current = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  };\n\n  const handleMouseMove = (event) => {\n    if (!clickStart.current || !globe.current) return; // Check if globe is initialized\n\n    const deltaMove = {\n      x: event.clientX - clickStart.current.x,\n      y: event.clientY - clickStart.current.y,\n    };\n\n    if (Math.abs(deltaMove.x) > 2 || Math.abs(deltaMove.y) > 2) {\n      isDragging.current = true;\n      globe.current.rotation.y += deltaMove.x * 0.005;\n      globe.current.rotation.x += deltaMove.y * 0.005;\n      clickStart.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    }\n  };\n\n  const handleMouseUp = (event) => {\n    if (!isDragging.current && globe.current) {\n      const mouse = {\n        x: (event.clientX / window.innerWidth) * 2 - 1,\n        y: -(event.clientY / window.innerHeight) * 2 + 1,\n      };\n      raycaster.setFromCamera(mouse, camera.current);\n\n      const intersects = raycaster.intersectObjects(\n        scene.current.children,\n        true\n      );\n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n\n        if (\n          clickedObject &&\n          clickedObject.userData &&\n          clickedObject.userData.isCountry\n        ) {\n          const country = clickedObject.userData.countryData; // Retrieve the country data\n\n          if (country) {\n            setSelectedCountry(country); // Show country details in modal\n          }\n        }\n      }\n    }\n\n    clickStart.current = null;\n    isDragging.current = false;\n  };\n\n  window.addEventListener(\"mousedown\", handleMouseDown);\n  window.addEventListener(\"mousemove\", handleMouseMove);\n  window.addEventListener(\"mouseup\", handleMouseUp);\n\n  return (\n    <div>\n      <div ref={globeRef} />\n      <CountryModal\n        isOpen={!!selectedCountry}\n        countryData={selectedCountry}\n        onClose={() => setSelectedCountry(null)}\n      />\n    </div>\n  );\n};\n\nexport default Globe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}